import RPi.GPIO as GPIO
import time
import serial
import sqlite3
from datetime import datetime
from luma.core.interface.serial import spi
from luma.oled.device import ssd1306
from luma.core.render import canvas
from PIL import ImageOps


spi_serial = spi(device=0, port=0)
oled = ssd1306(spi_serial, rotate=2)
oled.command(0xA0)
oled.command(0xC8)


GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

Vibration_pin = 16
buzzer_pin = 15
status_button = 23
sensorstatus = 0  
smokestatus = 0   
Vibrationstatus = 0  


GPIO.setup(Vibration_pin, GPIO.IN)
GPIO.setup(buzzer_pin, GPIO.OUT)
GPIO.setup(status_button, GPIO.IN, pull_up_down=GPIO.PUD_UP) 
last_button_state = GPIO.input(status_button)

dbconn = sqlite3.connect('mydatabase.db')
cursor = dbconn.cursor()


def buzzer_on():
    GPIO.output(buzzer_pin, GPIO.HIGH)

def buzzer_off():
    GPIO.output(buzzer_pin, GPIO.LOW)
    
def buzzer_time(duration):
    GPIO.output(buzzer_pin, GPIO.HIGH)
    time.sleep(duration)
    GPIO.output(buzzer_pin, GPIO.LOW)

# Attempt to connect to the Arduino
try:
    arduino = serial.Serial('/dev/ttyACM0', 9600, timeout=1)
    arduino.flush()
except serial.SerialException as e:
    print(f"Error Opening port: {e}")
    exit()

def SmokeSensor():
    global smokestatus
    if smokestatus == 1:
        if arduino.in_waiting > 0:
            line = arduino.readline().decode('utf-8').rstrip()

            if line > 85:
                buzzer_time(2)
            else:
                buzzer_off

            return line 
        else:
            return "No data from Arduino" 
    else:
        return "offline"

def VibrationSensor():
    global Vibrationstatus
    if Vibrationstatus == 1:
        if GPIO.input(Vibration_pin):
            buzzer_time(2)  
            return "1" 
        else:
            buzzer_off()
            return "0" 
    else:
        return "offline"

def display_text(smoke_value, vibration_status):
    try:
        with canvas(oled) as draw:
            formatted_smoke = f"{smoke_value}"  # Ensure this is string compatible
            formatted_vibration = f"{vibration_status}"

            draw.text((10, 10), f"Smoke: {formatted_smoke} ppm", fill="blue")
            draw.text((10, 30), f"Vibration: {formatted_vibration} g", fill="blue")

    except Exception as e:
        print(f"Error displaying text: {e}")

databasereset = 0
try:
    while True:
        current_button_state = GPIO.input(status_button)

        if last_button_state == GPIO.HIGH and current_button_state == GPIO.LOW:
            sensorstatus = 1 if sensorstatus == 0 else 0  
            smokestatus = sensorstatus  
            Vibrationstatus = sensorstatus 
            time.sleep(0.2) 

        last_button_state = current_button_state 
        
        smoke_value = SmokeSensor()  
        vibration_status = VibrationSensor() 

        if smoke_value > 85:
            buzzerstatus ="Active"
        else:
            buzzerstatus ="Inactive"

        if vibration_status == 1:
            buzzerstatus1 ="Active"
        else:
            buzzerstatus1 ="Inactive"

        display_text(smoke_value, vibration_status)

        print(f"{smoke_value}") 
        print(f"{vibration_status}")

        currenTime =datetime.now()
        cursor.execute('''
            INSERT INTO SensorData (smoke, vibration, smoke_buzzer, vibration_buzzer, time)
            VALUES (?, ?, ?, ?, ?)
        ''',(smoke_value, vibration_status, buzzerstatus, buzzerstatus1, currenTime)) 
        
        databasereset +=1

        if databasereset >= 150:
            cursor.execute('DELETE FROM my_table')
            dbconn.commit()
            databasereset = 0

        time.sleep(2) 

except KeyboardInterrupt:
    print("Program stopped by User")

finally:
    GPIO.cleanup()
    dbconn.close()
