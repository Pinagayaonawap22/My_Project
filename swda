import time
import drivers
from time import sleep
import adafruit_dht
import board
import RPi.GPIO as GPIO
from flask import Flask, render_template, jsonify

app = Flask(__name__)

GPIO.setmode(GPIO.BCM)
buzzer_pin = 21
trig_pin = 16
echo_pin = 20
trig_pin2 = 1
echo_pin2 = 12

dht_device = adafruit_dht.DHT11(board.D4, use_pulseio=False)

GPIO.setup(buzzer_pin, GPIO.OUT)
GPIO.setup(trig_pin, GPIO.OUT)
GPIO.setup(echo_pin, GPIO.IN)
GPIO.setup(trig_pin2, GPIO.OUT)
GPIO.setup(echo_pin2, GPIO.IN)

display = drivers.Lcd()

def buzzer_on():
    GPIO.output(buzzer_pin, GPIO.HIGH)

def buzzer_off():
    GPIO.output(buzzer_pin, GPIO.LOW)

def buzzer_sensor(duration):
    GPIO.output(buzzer_pin, GPIO.HIGH)
    time.sleep(duration)
    GPIO.output(buzzer_pin, GPIO.LOW)

def dht_data():
    try:
        temperature_c = dht_device.temperature
        humidity = dht_device.humidity

        if temperature_c is not None and humidity is not None:
            if temperature_c > 37:
                buzzer_sensor(4)
            else:
                buzzer_off()

            return temperature_c, humidity
        else:
            print("Failed to retrieve data from DHT sensor.")
            return None, None

    except RuntimeError as e:
        print(f"Error DHT sensor: {e}")
        return None, None

def distance_data():
    GPIO.output(trig_pin, True)
    time.sleep(0.00001)
    GPIO.output(trig_pin, False)

    while GPIO.input(echo_pin) == GPIO.LOW:
        pulseObject = time.time()
    while GPIO.input(echo_pin) == GPIO.HIGH:
        pulseNone = time.time()
        
    pulse_Distance = pulseNone - pulseObject
    
    distanceSensor = pulse_Distance * 17150
    
    if distanceSensor <= 7:
        buzzer_sensor(1)
    else:
        buzzer_off()
    return round(distanceSensor, 2)

def distance_data2():
    GPIO.output(trig_pin2, True)
    time.sleep(0.00001)
    GPIO.output(trig_pin2, False)

    while GPIO.input(echo_pin2) == GPIO.LOW:
        pulseObject2 = time.time()
    while GPIO.input(echo_pin2) == GPIO.HIGH:
        pulseNone2 = time.time()
        
    pulse_Distance2 = pulseNone2 - pulseObject2
    
    distanceSensor2 = pulse_Distance2 * 17150
    
    if distanceSensor2 <= 7:
        buzzer_sensor(1)
    else:
        buzzer_off()
    return round(distanceSensor2, 2)

@app.route('/')
def index():
    return render_template('index1.html')

@app.route('/Raspi_data')
def Raspi_data():
    temperature, humidity = dht_data()
    distance =distance_data()
    distance2 = distance_data2()
    
    print(f" Distance Left: {distance} cm")
    print(f" Distance Right: {distance2} cm")
    
    return jsonify(temperature=temperature,humidity=humidity,distance=distance, distance2=distance2)

try:
    while True:
        distance = distance_data()
        distance2 = distance_data2()
        display.lcd_display_string(f"Distance 1: {distance}", 1)  # Write line of text to first line of display
        display.lcd_display_string(f"Distance 2: {distance2}", 2)   # Write line of text to second line of display
        sleep(2)                                           # Give time for the message to be read                                         # Give time for the message to be read
        display.lcd_clear()                                # Clear the display of any data
        sleep(1)                                           # Give time for the message to be read
except KeyboardInterrupt:
    print("Cleaning up!")
    display.lcd_clear()
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5012, debug=True)

