import RPi.GPIO as GPIO
import mysql.connector
import time
import os
import cv2
from http.server import HTTPServer, BaseHTTPRequestHandler
import io
from multiprocessing import Process

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
FILE_PATH = os.path.join(TEMPLATES_DIR, 'file_motion.txt')

def Db_connection():
    return mysql.connector.connect(
        host='localhost',
        user='Embedded_act',
        password='bet1234',
        database='mydatabase'
    )

pir_sensor_pin = 26  
buzzer_pin = 20    
button_pin = 16

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
GPIO.setup(pir_sensor_pin, GPIO.IN)
GPIO.setup(buzzer_pin, GPIO.OUT)
GPIO.setup(button_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Pull-up resistor

sensor_active = True

def capture_image():
    cap = cv2.VideoCapture(0)
    ret, frame = cap.read()
    if ret:
        image_path = 'captured_image.jpg'
        cv2.imwrite(image_path, frame)
        cap.release()
        return image_path
    cap.release()
    return None

def send_image_to_db(image_path):
    with open(image_path, 'rb') as image_file:
        image_data = image_file.read()

    conz = Db_connection()
    cursor = conz.cursor()
    cursor.execute("INSERT INTO images (image_data) VALUES (%s)", (image_data,))
    conz.commit()
    conz.close()

def write_data_to_file(file_path, data):
    with open(file_path, 'a') as file:
        file.write(data)
        file.flush()

def push_button():
    global sensor_active
    sensor_active = not sensor_active
    state = "active" if sensor_active else "inactive"
    print(f"Sensor is now {state}")

def motion_detection():
    counter = 0
    global sensor_active
    last_capture_time = 0
    capture_interval = 10
    while True:
        if not GPIO.input(button_pin):  # Button pressed (active low)
            sensor_active = not sensor_active
            time.sleep(0.5)

        if sensor_active:
            if GPIO.input(pir_sensor_pin):
                time_dur = time.time()
                print("Motion Detected") 
                write_data_to_file(FILE_PATH, '1\n') 
                GPIO.output(buzzer_pin, GPIO.HIGH)
                
                if time_dur - last_capture_time > capture_interval:
                    image_path = capture_image()
                    if image_path:
                        send_image_to_db(image_path)
                        os.remove(image_path)
                        last_capture_time = time_dur

                time.sleep(10)
                
            else:
                print("No Motion") 
                write_data_to_file(FILE_PATH, '0\n') 
                GPIO.output(buzzer_pin, GPIO.LOW)    
        else:
            print("Sensor is inactive")
            time.sleep(1)

        counter += 1

        if counter >= 100:
            counter = 0
            print("Resetting file after 100 entries")
            with open(FILE_PATH, 'w') as file:
                pass  

        time.sleep(2)  

class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            with open(os.path.join(TEMPLATES_DIR, 'Embedded_activity.php'), 'rb') as f:
                self.wfile.write(f.read())
        elif self.path == '/file_motion.txt':
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            with open(FILE_PATH, 'rb') as f:
                self.wfile.write(f.read())
        elif self.path == '/recent_image':
            conz = Db_connection()
            cursor = conz.cursor()
            cursor.execute("SELECT image_data FROM images ORDER BY uploaded_at DESC LIMIT 1")
            result = cursor.fetchone()
            conz.close()
            
            if result:
                image_data = result[0]
                self.send_response(200)
                self.send_header('Content-type', 'image/jpeg')
                self.end_headers()
                self.wfile.write(image_data)
            else:
                self.send_response(404)
                self.wfile.write(b"No image available")
        elif self.path == '/check_image':
            conz = Db_connection()
            cursor = conz.cursor()
            cursor.execute("SELECT COUNT(*) FROM images ORDER BY uploaded_at DESC LIMIT 1")
            result = cursor.fetchone()
            conz.close()

            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            if result[0] > 0:
                self.wfile.write(b'{"status": "new_image_available"}')
            else:
                self.wfile.write(b'{"status": "no_image"}')
        else:
            self.send_response(404)
            self.wfile.write(b'Not Found')

def run_server():
    server_address = ('0.0.0.0', 5012)
    httpd = HTTPServer(server_address, SimpleHTTPRequestHandler)
    httpd.serve_forever()

if __name__ == "__main__":
    motion_process = Process(target=motion_detection)
    motion_process.start()

    run_server()
