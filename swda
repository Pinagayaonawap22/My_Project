<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EMBEDDED ACTIVITIES WEBSITE</title>
    <style>
        * {
            box-sizing: border-box;
        }
        body {
            margin: 0;
            padding: 0;
            background-color: antiquewhite;
            width: 100vw;
            height: 100vh;
            overflow: hidden;
        }
        #container {
            display: flex;
            width: 100vw;
            height: 100vh;
            transition: width 0.7s ease;
        }
        #leftDiv {
            display: grid;
            background-color: #B99470;
            width: 0%;
            height: 100%;
            position: relative;
            gap: 2px;
            transition: width 0.5s ease;
        }
        .MainContent {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            grid-gap: 10px;
            justify-content: center;
            align-items: center;
            height: 99%;
            padding: 10px;
        }
        #leftDiv.visible {
            width: 10%;
        }
        #rightDiv {
            display: flex;
            background-color: #FEFAE0;
            width: 100%;
            height: 100%;
            position: relative;
            gap: 30px;
        }
        #rightDiv.expanded {
            width: 90%;
        }
        button {
            background-color: white;
            padding: 10px;
            cursor: pointer;
            transition: all 0.5s ease;
        }
        #toggleButton.center {
            position: absolute;
            top: 50%;
            left: 0.5%;
            transform: translate(-50%, -50%) rotate(90deg);
        }
        .act1_title {
            text-align: center;
            font-size: 50px;
        }
        .texthere {
            font-size: 25px;
            font-family: Arial, Helvetica, sans-serif;
        }
        #tempHumidityChart, #distanceChart {
            width: 100%;
            height: 450px;
            border: 1px solid;
        }
        .acttab {
            display: none;
        }
        .acttab.active {
            display: block;
            text-align: center;
            position: relative;
            width: 100%;
        }
    </style>
</head>
<body>
    <div id="container">
        <div id="leftDiv">
            <div class="MainContent">
                <button class="optionbutton" onclick="tabControl(1)">Activity 1</button>
                <button class="optionbutton" onclick="tabControl(2)">Activity 2</button>
                <button class="optionbutton" onclick="tabControl(3)">Activity 3</button>
                <button class="optionbutton" onclick="tabControl(4)">Activity 4</button>
                <button class="optionbutton" onclick="tabControl(5)">Activity 5</button>
                <button class="optionbutton" onclick="tabControl(6)">Activity 6</button>
                <button class="optionbutton" onclick="tabControl(7)">Activity 7</button>
                <button class="optionbutton" onclick="tabControl(8)">Activity 8</button>
                <button class="optionbutton" onclick="tabControl(9)">Activity 9</button>
                <button class="optionbutton" onclick="tabControl(10)">Activity 10</button>
                <button class="optionbutton" onclick="tabControl(11)">Members</button>
            </div>
        </div>
        <div id="rightDiv">
            <div>
                <button id="toggleButton" class="center" style="border: none; background-color: #B99470; color: black; font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif">
                    Main Content
                </button>
            </div>
            <div id="tabOpen1" class="acttab active">
                <h1 class="act1_title">Activity 1: Temperature & Humidity sensor with Webserver</h1>
                <div style="display: flex; align-items: center; justify-content: space-between; margin-top: -30px;">
                    <div style="text-align: left;">
                        <p class="texthere">Temperature: <span id="temptext" class="datahere">--</span> <span id="tempUnit" class="datahere">C</span></p>
                        <p class="texthere">Humidity: <span id="humiditytext" class="datahere">--</span> %</p>
                        <p class="texthere">Highest Temperature: <span id="highestTemp" class="datahere">--</span> <span id="tempUnit" class="datahere"></span></p>
                    </div>
                    <div style="display: flex; align-items: center; gap: 5px; padding: 10px;">
                        <p style="margin: 0;">Buzzer Status:</p>
                        <div id="colorbuzzer">
                            <img src="https://i.imghippo.com/files/6fNBA1725347941.png" alt="Buzzer Status" style="width: 110px; vertical-align: middle; margin-right: 20px;">
                        </div>
                    </div>
                </div>
                <canvas id="tempHumidityChart"></canvas>
                <div class="ChartPart">
                    <button id="toggleUnitButton" class="buttonstyle">Switch to Fahrenheit</button>
                </div>
            </div>
            <div id="tabOpen2" class="acttab">
                <h1 class="act1_title">Activity 2: Distance Sensor with Webserver</h1>
                <div style="display: flex; align-items: center; justify-content: space-between; margin-top: -30px;">
                    <div style="text-align: left;">
                        <p class="texthere">First sensor: <span id="distance1" class="datahere">--</span> cm</p>
                        <p class="texthere">Second sensor: <span id="distance2" class="datahere">--</span> cm</p>
                    </div>
                    <div style="display: flex; align-items: center; gap: 5px; padding: 10px;">
                        <p style="margin: 0;">Buzzer Status:</p>
                        <div id="colorbuzzer1">
                            <img src="https://i.imghippo.com/files/bmspu1725442654.png" alt="Buzzer Status" style="width: 110px; vertical-align: middle; margin-right: 20px;">
                        </div>
                    </div>
                </div>
                <canvas id="distanceChart"></canvas>
            </div>
            <div id="tabOpen3" class="acttab">
                <h1 class="act1_title">Activity 3: Motion Sensor and Rasp Camera with Webserver</h1>
                <div style="display: flex; align-items: center; justify-content: space-between; margin-top: -30px;">
                    <div style="text-align: left;">
                        <p class="texthere">Motion Detection: <span id="PirText" class="datahere">--</span></p>
                    </div>
                    <div style="display: flex; align-items: center; gap: 5px; padding: 10px;">
                        <p style="margin: 0;">Buzzer Status:</p>
                        <div id="colorbuzzer1">
                            <img src="https://i.imghippo.com/files/bmspu1725442654.png" alt="Buzzer Status" style="width: 110px; vertical-align: middle; margin-right: 20px;">
                        </div>
                    </div>
                </div>
                <canvas id="motionChart"></canvas>
            </div>
        </div>
        
    </div> 

<script>
    document.getElementById("toggleButton").addEventListener("click", function() {
        const leftDiv = document.getElementById("leftDiv");
        const rightDiv = document.getElementById("rightDiv");
        leftDiv.classList.toggle("visible");
        rightDiv.classList.toggle("expanded");
    });

    function tabControl(chooseDiv) {
        console.log("Tab control called with:", chooseDiv);
        for (let i = 1; i <= 11; i++) {
            const tab = document.getElementById('tabOpen' + i);
            if (tab) {
                tab.classList.remove('active');
            }
        }
        const selectedTab = document.getElementById('tabOpen' + chooseDiv);
        if (selectedTab) {
            selectedTab.classList.add('active');
        } else {
            console.error("Tab not found:", 'tabOpen' + chooseDiv);
        }
    }

    let tempHumidityChart;
    let distanceChart;
    let temperatureUnit = 'C';
    let highestTemperature = -Infinity; 
    const highestTempDisplay = document.getElementById('highestTemp');
    const intervalMinutes = 1;
    let intervalStartTime = Date.now();
    const iconChanger = document.getElementById('colorbuzzer');
    const iconChanger1 = document.getElementById('colorbuzzer1');

    function convertToFahrenheit(celsius) {
        return (celsius * 9/5) + 32;
    }

    function convertToKelvin(celsius) {
        return celsius + 273.15;
    }
    async function txtfile(){
        try{
            const response= await fetch('fule_motion.txt');
            const text = await response.text();
            const line = text.trim().split('\n');
            const data = lines.map(line => parseInt(line.trim(), 10));

            return data
        } catch (error) {
            console.error('Error Data', error);
            return[];
        }
    }
    async function renderChart(){
        const data =await txtfile();

        const chartx = document.getElementById('motionChart').getContext('2d');
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: data.map((_,index) => index + 1),
                datasets: [{
                    label: 'Motion Data',
                    data: data,
                    borderColor: 'green',
                    backgroundColor: 'red',
                    borderWidth: 1
                }] 
            },
            options: { 
                scales: {
                    x: {
                        beginAtZero: true,
                        title: {
                           display: true,
                           text: 'Data Points' 
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Value'
                        }
                    }
                }
            }
        })
    }
    renderChart();

    function fetchDataAndUpdateCharts() {
        fetch('/Raspi_data')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                let tempCelsius = data.temperature;
                let humidity = data.humidity;
                let distance = data.distance;
                let distance2 = data.distance2;
                let temp;
                
                if (tempCelsius === null || typeof tempCelsius === 'undefined') {
                    tempCelsius = 0; 
                }

                if (humidity === null || typeof humidity === 'undefined') {
                    humidity = 0; 
                }

                if (distance === null || typeof distance === 'undefined') {
                    distance = 1023; 
                }

                if (distance2 === null || typeof distance2 === 'undefined') {
                    distance2 = 1023;
                }

                switch (temperatureUnit) {
                    case 'C':
                        temp = tempCelsius;
                        iconChanger.style.backgroundColor= 'ghostwhite'
                        break;
                    case 'F':
                        temp = convertToFahrenheit(tempCelsius);
                        if(temp => 100.4){
                            iconChanger.style.backgroundColor = 'red'
                        }else{
                            iconChanger.style.backgroundColor= 'ghostwhite'
                        }
                        break;
                    case 'K':
                        temp = convertToKelvin(tempCelsius);
                        if(temp => 311.15){
                            iconChanger.style.backgroundColor = 'red'
                        }else{
                            iconChanger.style.backgroundColor= 'ghostwhite'
                        }
                        break;
                }
                
                if (!isNaN(temp) && temp > highestTemperature) {
                    highestTemperature = temp;
                }
                
                if(distance <= 6){
                        iconChanger1.style.backgroundColor = 'red'
                    }else{
                        iconChanger1.style.backgroundColor= 'ghostwhite'
                   }

                
                const now = Date.now();
                if (temp > highestTemperature) {
                    highestTemperature = temp;
                }
                if (now - intervalStartTime >= intervalMinutes * 60 * 1000) {

                    highestTempDisplay.textContent = `${highestTemperature.toFixed(1)} ${temperatureUnit}`;
                    
                    highestTemperature = -Infinity;
                    intervalStartTime = now;
                }

                document.getElementById('temptext').textContent = isNaN(temp) ? 'N/A' : `${temp.toFixed(2)}`;
                document.getElementById('tempUnit').textContent = temperatureUnit;
                document.getElementById('humiditytext').textContent = isNaN(humidity) ? 'N/A' : `${humidity.toFixed(2)}`;
                document.getElementById('distance1').textContent = isNaN(distance) ? 'N/A' : `${distance.toFixed(2)} cm`;
                document.getElementById('distance21').textContent = isNaN(distance2) ? 'N/A' : `${distance2.toFixed(2)} cm`;

                
                if (tempHumidityChart) {
                    tempHumidityChart.data.datasets[0].data.push(temp);
                    tempHumidityChart.data.datasets[1].data.push(humidity);

                    const maxDataPoints = 5000;
                    if (tempHumidityChart.data.datasets[0].data.length > maxDataPoints) {
                        tempHumidityChart.data.datasets[0].data.shift();
                        tempHumidityChart.data.datasets[1].data.shift();
                    }

                    tempHumidityChart.data.labels.push('');
                    if (tempHumidityChart.data.labels.length > maxDataPoints) {
                        tempHumidityChart.data.labels.shift();
                    }

                    tempHumidityChart.update();
                } else {
                    const ctxTempHumidity = document.getElementById('tempHumidityChart').getContext('2d');
                    tempHumidityChart = new Chart(ctxTempHumidity, {
                        type: 'line',
                        data: {
                            labels: [''],
                            datasets: [
                                {
                                    label: `Temperature (${temperatureUnit})`,
                                    data: [temp],
                                    borderColor: 'red',
                                    fill: false
                                },
                                {
                                    label: 'Humidity (%)',
                                    data: [humidity],
                                    borderColor: 'blue',
                                    fill: false
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Time'
                                    }
                                },
                                y: {
                                    title: {
                                        display: true,
                                        text: 'Value'
                                    }
                                }
                            }
                        }
                    });
                }

                if (distanceChart) {
                    distanceChart.data.datasets[0].data.push(distance);
                    distanceChart.data.datasets[1].data.push(distance2);

                    const maxDataPoints = 5000;
                    if (distanceChart.data.datasets[0].data.length > maxDataPoints) {
                        distanceChart.data.datasets[0].data.shift();
                    }
                    if (distanceChart.data.datasets[1].data.length > maxDataPoints) {                   
                        distanceChart.data.datasets[1].data.shift();
                    }

                    distanceChart.data.labels.push('');
                    if (distanceChart.data.labels.length > maxDataPoints) {
                        distanceChart.data.labels.shift();
                    }

                    distanceChart.update();
                } else {
                    const ctxDistance = document.getElementById('distanceChart').getContext('2d');
                    distanceChart = new Chart(ctxDistance, {
                        type: 'line',
                        data: {
                            labels: [''],
                            datasets: [{
                                    label: 'First Seensor (cm)',
                                    data: [distance],
                                    borderColor: 'black',
                                    fill: false
                                },
                                {
                                    label: 'Second Sensor (%)',
                                    data: [distance2],
                                    borderColor: 'orange',
                                    fill: false
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Time'
                                    }
                                },
                                y: {
                                    reverse: true,
                                    title: {
                                        display: true,
                                        text: 'Distance (cm)'
                                    }
                                }
                            }
                        }
                    });
                }
            })
            .catch(error => {
                console.error('Error fetching the data:', error);
            });
    }

    function toggleTemperatureUnit() {
        switch (temperatureUnit) {
            case 'C':
                temperatureUnit = 'F';
                document.getElementById('toggleUnitButton').textContent = 'Switch to Kelvin';
                if (tempHumidityChart) {
                    tempHumidityChart.data.labels = [];
                    tempHumidityChart.data.datasets.forEach(dataset => {
                        dataset.data = [];
                    });
                    tempHumidityChart.update();
                    highestTemperature = -Infinity;
                    highestTempDisplay.textContent = `${temperatureUnit}`;
                }
                
            break;
            case 'F':
                temperatureUnit = 'K';
                document.getElementById('toggleUnitButton').textContent = 'Switch to Celsius';
                if (tempHumidityChart) {
                    tempHumidityChart.data.labels = [];
                    tempHumidityChart.data.datasets.forEach(dataset => {
                        dataset.data = [];
                    });
                    tempHumidityChart.update();
                    highestTemperature = -Infinity;
                    highestTempDisplay.textContent = `${temperatureUnit}`;
                }

            break;
            case 'K':
                temperatureUnit = 'C';
                document.getElementById('toggleUnitButton').textContent = 'Switch to Fahrenheit';
                if(temp => 38){
                    iconChanger.style.backgroundColor = 'red'
                }else{
                    iconChanger.style.backgroundColor= 'ghostwhite'
                }
                if (tempHumidityChart) {
                    tempHumidityChart.data.labels = [];
                    tempHumidityChart.data.datasets.forEach(dataset => {
                        dataset.data = [];
                    });
                    tempHumidityChart.update();
                    highestTemperature = -Infinity;
                    highestTempDisplay.textContent = `${temperatureUnit}`;
                }

            break;
        }
 
        fetchDataAndUpdateCharts();
    }

    fetchDataAndUpdateCharts();
    setInterval(fetchDataAndUpdateCharts, 1500);
    document.getElementById('toggleUnitButton').addEventListener('click', toggleTemperatureUnit);
</script>

</body>
</html>
