import RPi.GPIO as GPIO
import time
import serial
import os
import cv2
import spidev
from RPLCD.i2c import CharLCD
from flask import Flask, render_template, send_from_directory, send_file, Response
import threading

app = Flask(__name__)

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
FILE_PATH = os.path.join(TEMPLATES_DIR, 'cognatefile.txt')

def write_data_to_file(file_path, data):
    with open(file_path, 'a') as file:
        file.write(data)
        file.flush()

relay_pins = [17, 27, 22, 23]
# relay 0 is led light
# relay 1 is aircon
# relay 2 is up pump
# relay 3 is down pump

for pin in relay_pins:
    GPIO.setup(pin, GPIO.OUT)

#lcd = CharLCD(i2c_expander='PCF8574', address=0x27, port=1, cols=20, rows=4)

try:
    arduino = serial.Serial('/dev/ttyUSB0', 9600, timeout=1)
    arduino.flush()
    print("Serial connection established.")
except serial.SerialException as e:
    print(f"Error opening port: {e}")
    exit()

def ledlight(relay_channel, duration):
    GPIO.output(relay_pins[0], GPIO.HIGH)
    GPIO.output(relay_pins[1], GPIO.LOW)
    print(f"Relay {relay_channel} activated for {duration} seconds.")
    time.sleep(duration)
    GPIO.output(relay_pins[0], GPIO.LOW)
    GPIO.output(relay_pins[1], GPIO.HIGH)

def aircon(relay_channel1, duration1):
    GPIO.output(relay_pins[1], GPIO.HIGH)
    print(f"Relay {relay_channel1} activated for {duration1} seconds.")
    time.sleep(duration1)
    GPIO.output(relay_pins[1], GPIO.LOW)

def main_system():
    print(f"Bytes waiting: {arduino.in_waiting}")
    if arduino.in_waiting > 0:
        arduinodata = arduino.readline().decode('utf-8').strip()
        print(f"Raw data from Arduino: {arduinodata}")

        # Handle error and empty data
        if arduinodata.startswith('Error') or arduinodata == ',':
            print("Received error from Arduino or empty data.")
            return

        data_parts = arduinodata.split(',')

        try:
            temp, humid, water, pHlevel, waterlevel = map(float, data_parts)
            
            print(f"Temperature: {temp}")
            print(f"Humidity: {humid}")
            print(f"Water level: {water}")
            print(f"pH level: {pHlevel}")
            print(f"Water level: {waterlevel}")

            handle_DHT(temp, humid)
            handle_watercontainer(water)
            handle_phlevel(pHlevel)

            write_data_to_file(FILE_PATH, f'{temp},{humid},{water},{pHlevel},{waterlevel}\n') 
            #lcd.clear()
            #lcd.write_string(f"Temperature: {temp:.2f} C")
            # lcd.cursor_pos = (1, 0)
            # lcd.write_string(f"Humidity: {humid} %")
            # lcd.cursor_pos = (2, 0)
            # lcd.write_string(f"pH level: {pHlevel}")
            # lcd.cursor_pos = (3, 0)
            # lcd.write_string(f"Water level: {waterlevel:.2f} cm")

            txtcount += 1

            if txtcount >= 20:
                txtcount = 0
                print("txt file reset")
                with open(FILE_PATH, 'w') as file:
                    pass

            time.sleep(2)
        except ValueError:
            print("Fetching data error")
    else:
        print("No data from Arduino")

def handle_DHT(temp, humid):
    if temp < 11:
        relay_thread = threading.Thread(target=ledlight, args=(relay_pins[0], 360))
        relay_thread.start()

    if temp > 27:
        relay_thread = threading.Thread(target=aircon, args=(relay_pins[1], 360))
        relay_thread.start()
    elif 12 <= temp <= 26:
        GPIO.output(relay_pins[1], GPIO.HIGH)

    if humid > 75:
        GPIO.output(relay_pins[1], GPIO.LOW)
    elif humid < 49:
        GPIO.output(relay_pins[1], GPIO.HIGH)

def handle_watercontainer(water):
    if water == 1:
        print("No water, need to fill immediately")

def handle_phlevel(pHlevel):
    if pHlevel > 6.50:
        GPIO.output(relay_pins[3], GPIO.HIGH)
        GPIO.output(relay_pins[2], GPIO.LOW)
    elif pHlevel < 5.40:
        GPIO.output(relay_pins[3], GPIO.LOW)
        GPIO.output(relay_pins[2], GPIO.HIGH)

try:
    while True:
        main_system()

except KeyboardInterrupt:
    print("Exiting...")
    GPIO.cleanup()

@app.route('/')
def index():
    return render_template('cognatesite.html')
