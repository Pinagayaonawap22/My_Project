import time
import adafruit_dht
import board
import RPi.GPIO as GPIO
from flask import Flask, render_template, jsonify

app = Flask(__name__)

GPIO.setmode(GPIO.BCM)
buzzer_pin = 21
trig_pin = 16
echo_pin = 20

GPIO.setup(buzzer_pin,GPIO.OUT)
GPIO.setup(trig_pin, GPIO.OUT)
GPIO.setup(echo_pin, GPIO.IN)

dht_device = adafruit_dht.DHT11(board.D4, use_pulseio=False)

def buzzer_on():
    GPIO.output(buzzer_pin,GPIO.HIGH)
    
def buzzer_off():
    GPIO.output(buzzer_pin, GPIO.LOW)
    
def buzzer_sensor(duration):
    GPIO.output(buzzer_pin, GPIO.HIGH)
    time.sleep(duration)
    GPIO.output(buzzer_pin, GPIO.LOW)

def distanceSensor():
    GPIO.output(trig_pin, GPIO.LOW)
    time.sleep(2)
    
    GPIO.output(trig_pin,GPIO.HIGH)
    time.sleep(0.00001)
    GPIO.output(trig_pin, GPIO.LOW)
    
    while GPIO.input(echo_pin) == GPIO.LOW:
        pulseObject = time.time()
    while GPIO.input(echo_pin) == GPIO.HIGH:
        pulseNone = time.time()
        
    pulse_Distance = pulseNone - pulseObject
    
    distanceSensor = pulse_Distance * 1750
    distanceSensor =round(distanceSensor, 2)
    
    return distanceSensor

def sensor_data():
    try:
        temperature_c = dht_device.temperature
        humidity = dht_device.humidity
        html_dist = distanceSensor()
        
        data = {
            'temperature': temperature_c,
            'humidity': humidity,
            'HTML_distance': html_dist
        }

        print(f"Sensor data: {data}")

        if temperature_c >= 38:
            buzzer_sensor(4)
        else:
            buzzer_off()

        if temperature_c is None or humidity is None:
            raise RuntimeError("Failed to retrieve data from sensor.")

        return data

    except RuntimeError as error:
        print(f"Error: {error.args[0]}")
        return {
            'temperature': 'N/A',
            'humidity': 'N/A',
            'HTML_distance': 'N/A'
        }

@app.route('/Raspi_data')
def Raspi_data():
    try:
        data = sensor_data()
        print(f"Data to be JSONified: {data}")  # Debugging line
        return jsonify(data)
    except Exception as e:
        print(f"Exception in /Raspi_data route: {e}")
        return jsonify({'error': 'Internal Server Error'}), 500


@app.route('/')
def index():
    try:
        return render_template('index1.html')
    except Exception as e:
        print(f"Exception in / route: {e}")
        return make_response("Internal Server Error", 500)
    
time.sleep(1)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5008, debug=True)
