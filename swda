import RPi.GPIO as GPIO
import time
import serial

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

Vibration_pin = 16
buzzer_pin = 15
status_button = 14  # This pin is defined but not used
sensorstatus = True

GPIO.setup(Vibration_pin, GPIO.IN)
GPIO.setup(buzzer_pin, GPIO.OUT)


def buzzer_on():
    GPIO.output(buzzer_pin, GPIO.HIGH)

def buzzer_off():
    GPIO.output(buzzer_pin, GPIO.LOW)
    
def buzzer_time(duration):
    GPIO.output(buzzer_pin, GPIO.HIGH)
    time.sleep(duration)
    GPIO.output(buzzer_pin, GPIO.LOW)  # Turn off the buzzer

try:
    arduino = serial.Serial('/dev/ttyACM0', 9600, timeout=1)
    arduino.flush()
except serial.SerialException as e:
    print(f"Error Opening of port: {e}")
    exit()
        
def SmokeSensor():
    if arduino.in_waiting > 0:
        line = arduino.readline().decode('utf-8').rstrip()
        return line  # Return the smoke sensor value
    else:
        return "No data from Arduino"  # Return a message if there's no data

def VibrationSensor():
    if GPIO.input(Vibration_pin):
        buzzer_time(2)  # Activate buzzer for 2 seconds if vibration is detected
        return "Vibration Detected"  # Return vibration status
    else:
        buzzer_off()
        return "No Vibration"  # Return vibration status

try:
    while True:
        smoke_value = SmokeSensor()  # Get smoke value
        vibration_status = VibrationSensor()  # Get vibration status
        
        print(f"Smoke value: {smoke_value}")  # Print smoke value
        print(f"Vibration status: {vibration_status}")  # Print vibration status
        
        time.sleep(1)  # Added delay to avoid rapid polling

except KeyboardInterrupt:
    print("Sensor stopped")
    
finally:
    GPIO.cleanup()  # Cleanup GPIO settings
