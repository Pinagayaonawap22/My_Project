import RPi.GPIO as GPIO
import mysql.connector
import time
import os
import cv2
from flask import Flask, render_template, send_from_directory, send_file, Response
import io
from multiprocessing import Process

app = Flask(__name__)

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
FILE_PATH = os.path.join(TEMPLATES_DIR, 'file_motion.txt')

def Db_connection():
    return mysql.connector.connect(
        host='localhost',
        user='Embedded_act',
        password='bet1234',
        database='mydatabase'
    )

pir_sensor_pin = 26  
buzzer_pin = 20    
button_pin = 16

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
GPIO.setup(pir_sensor_pin, GPIO.IN)
GPIO.setup(buzzer_pin, GPIO.OUT)
GPIO.setup(button_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Pull-up resistor

sensor_active = True

def capture_image():
    cap = cv2.VideoCapture(0)
    ret, frame = cap.read()
    if ret:
        image_path = 'captured_image.jpg'
        cv2.imwrite(image_path, frame)
        cap.release()
        return image_path
    cap.release()
    return None

def send_image_to_db(image_path):
    with open(image_path, 'rb') as image_file:
        image_data = image_file.read()

    conz = Db_connection()
    cursor = conz.cursor()
    cursor.execute("INSERT INTO images (image_data) VALUES (%s)", (image_data,))
    conz.commit()
    conz.close()

def write_data_to_file(file_path, data):
    with open(file_path, 'a') as file:
        file.write(data)
        file.flush()

def push_button():
    global sensor_active
    sensor_active = not sensor_active
    state = "active" if sensor_active else "inactive"
    print(f"Sensor is now {state}")

def motion_detection():
    counter = 0
    global sensor_active
    while True:
        if not GPIO.input(button_pin):  # Button pressed (active low)
            sensor_active = not sensor_active
            time.sleep(0.5)

        if sensor_active:
            if GPIO.input(pir_sensor_pin): 
                print("Motion Detected") 
                write_data_to_file(FILE_PATH, '1\n') 
                GPIO.output(buzzer_pin, GPIO.HIGH)   

                image_path = capture_image()
                if image_path:
                    send_image_to_db(image_path)
                    os.remove(image_path)

                time.sleep(10)
            else:
                print("No Motion") 
                write_data_to_file(FILE_PATH, '0\n') 
                GPIO.output(buzzer_pin, GPIO.LOW)    
        else:
            print("Sensor is inactive")
            time.sleep(1)

        counter += 1

        if counter >= 100:
            counter = 0
            print("Resetting file after 100 entries")
            with open(FILE_PATH, 'w') as file:
                pass  

        time.sleep(1.5)  

@app.route('/')
def index():
    return render_template('index1.html')

@app.route('/file_motion.txt')
def get_file_motion():
    return send_from_directory(TEMPLATES_DIR, 'file_motion.txt')

@app.route('/recent_image')
def recent_image():
    conz = Db_connection()
    cursor = conz.cursor()
    cursor.execute("SELECT image_data FROM images ORDER BY uploaded_at DESC LIMIT 1")
    result = cursor.fetchone()
    conz.close()
    
    if result:
        image_data = result[0]
        return send_file(io.BytesIO(image_data), mimetype='image/jpeg')
    else:
        return "No image available"

@app.route('/check_image')
def check_image():
    conz = Db_connection()
    cursor = conz.cursor()
    cursor.execute("SELECT COUNT(*) FROM images ORDER BY uploaded_at DESC LIMIT 1")
    result = cursor.fetchone()
    conz.close()

    if result[0] > 0:
        return {'status': 'new_image_available'}
    else:
        return {'status': 'no_image'}
    
def run_flask():
    app.run(host='0.0.0.0', port=5014, debug=True)

if __name__ == "__main__":
    motion_process = Process(target=motion_detection)
    motion_process.start()

    run_flask()
