<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EMBEDDED ACTIVITIES WEBSITE</title>
    <style>
        * {
            box-sizing: border-box;
        }
        body {
            margin: 0;
            padding: 0;
            background-color: antiquewhite;
            width: 100vw;
            height: 100vh;
            overflow: hidden;
        }
        #container {
            display: flex;
            width: 100vw;
            height: 100vh;
            transition: width 0.7s ease;
        }
        #leftDiv {
            display: grid;
            background-color: #B99470;
            width: 0%;
            height: 100%;
            position: relative;
            gap: 2px;
            transition: width 0.5s ease;
        }
        .MainContent {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            grid-gap: 10px;
            justify-content: center;
            align-items: center;
            height: 99%;
            padding: 10px;
        }
        #leftDiv.visible {
            width: 10%;
        }
        #rightDiv {
            display: flex;
            background-color: #FEFAE0;
            width: 100%;
            height: 100%;
            position: relative;
            gap: 30px;
        }
        #rightDiv.expanded {
            width: 90%;
        }
        button {
            background-color: white;
            padding: 10px;
            cursor: pointer;
            transition: all 0.5s ease;
        }
        #toggleButton.center {
            position: absolute;
            top: 50%;
            left: 0.5%;
            transform: translate(-50%, -50%) rotate(90deg);
        }
        .act1_title {
            text-align: center;
            font-size: 50px;
        }
        .texthere {
            font-size: 25px;
            font-family: Arial, Helvetica, sans-serif;
        }
        #tempHumidityChart, #distanceChart, #MotionChart {
            width: 100%;
            height: 450px;
            border: 1px solid;
        }
        .acttab {
            display: none;
        }
        .acttab.active {
            display: block;
            text-align: center;
            position: relative;
            width: 100%;
        }
    </style>
</head>
<body>
    <div id="container">
        <div id="leftDiv">
            <div class="MainContent">
                <button class="optionbutton" onclick="tabControl(1)">Activity 1</button>
                <button class="optionbutton" onclick="tabControl(2)">Activity 2</button>
                <button class="optionbutton" onclick="tabControl(3)">Activity 3</button>
                <button class="optionbutton" onclick="tabControl(4)">Activity 4</button>
                <button class="optionbutton" onclick="tabControl(5)">Activity 5</button>
                <button class="optionbutton" onclick="tabControl(6)">Activity 6</button>
                <button class="optionbutton" onclick="tabControl(7)">Activity 7</button>
                <button class="optionbutton" onclick="tabControl(8)">Activity 8</button>
                <button class="optionbutton" onclick="tabControl(9)">Activity 9</button>
                <button class="optionbutton" onclick="tabControl(10)">Activity 10</button>
                <button class="optionbutton" onclick="tabControl(11)">Members</button>
            </div>
        </div>
        <div id="rightDiv">
            <div>
                <button id="toggleButton" class="center" style="border: none; background-color: #B99470; color: black; font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif">
                    Main Content
                </button>
            </div>
            <div id="tabOpen1" class="acttab active">
                <h1 class="act1_title">Activity 1: Temperature & Humidity sensor with Webserver</h1>
                <div style="display: flex; align-items: center; justify-content: space-between; margin-top: -30px;">
                    <div style="text-align: left;">
                        <p class="texthere">Temperature: <span id="temptext" class="datahere">--</span> <span id="tempUnit" class="datahere">C</span></p>
                        <p class="texthere">Humidity: <span id="humiditytext" class="datahere">--</span> %</p>
                        <p class="texthere">Highest Temperature: <span id="highestTemp" class="datahere">--</span> <span id="tempUnit" class="datahere"></span></p>
                    </div>
                    <div style="display: flex; align-items: center; gap: 5px; padding: 10px;">
                        <p style="margin: 0;">Buzzer Status:</p>
                        <div id="colorbuzzer">
                            <img src="https://i.imghippo.com/files/6fNBA1725347941.png" alt="Buzzer Status" style="width: 110px; vertical-align: middle; margin-right: 20px;">
                        </div>
                    </div>
                </div>
                <canvas id="tempHumidityChart"></canvas>
                <div class="ChartPart">
                    <button id="toggleUnitButton" class="buttonstyle">Switch to Fahrenheit</button>
                </div>
            </div>
            <div id="tabOpen2" class="acttab">
                <h1 class="act1_title">Activity 2: Distance Sensor with Webserver</h1>
                <div style="display: flex; align-items: center; justify-content: space-between; margin-top: -30px;">
                    <div style="text-align: left;">
                        <p class="texthere">First sensor: <span id="distance1" class="datahere">--</span> cm</p>
                        <p class="texthere">Second sensor: <span id="distance2" class="datahere">--</span> cm</p>
                    </div>
                    <div style="display: flex; align-items: center; gap: 5px; padding: 10px;">
                        <p style="margin: 0;">Buzzer Status:</p>
                        <div id="colorbuzzer1">
                            <img src="https://i.imghippo.com/files/bmspu1725442654.png" alt="Buzzer Status" style="width: 110px; vertical-align: middle; margin-right: 20px;">
                        </div>
                    </div>
                </div>
                <canvas id="distanceChart"></canvas>
            </div>
            <div id="tabOpen3" class="acttab">
                <h1 class="act1_title">Activity 3: Motion Sensor and Rasp Camera with Webserver</h1>
                <div style="display: flex; align-items: center; justify-content: space-between; margin-top: -30px;">
                    <div style="text-align: left;">
                        <p class="texthere">Motion Detection: <span id="PirText" class="datahere">--</span></p>
                    </div>
                    <div style="display: flex; align-items: center; gap: 5px; padding: 10px;">
                        <p style="margin: 0;">Buzzer Status:</p>
                        <div id="colorbuzzer2">
                            <img src="https://i.imghippo.com/files/bmspu1725442654.png" alt="Buzzer Status" style="width: 110px; vertical-align: middle; margin-right: 20px;">
                        </div>
                    </div>
                </div>
                <canvas id="MotionChart"></canvas>
            </div>
        </div>
    </div> 

    <script>
        document.getElementById("toggleButton").addEventListener("click", function() {
            const leftDiv = document.getElementById("leftDiv");
            const rightDiv = document.getElementById("rightDiv");
            leftDiv.classList.toggle("visible");
            rightDiv.classList.toggle("expanded");
        });

        function tabControl(chooseDiv) {
            for (let i = 1; i <= 11; i++) {
                const tab = document.getElementById('tabOpen' + i);
                if (tab) {
                    tab.classList.remove('active');
                }
            }
            const selectedTab = document.getElementById('tabOpen' + chooseDiv);
            if (selectedTab) {
                selectedTab.classList.add('active');
            }
        }
    
        let tempHumidityChart;
        let distanceChart;
        let MotionChart;

        let temperatureUnit = 'C';
        let highestTemperature = -Infinity; 
        const highestTempDisplay = document.getElementById('highestTemp');
        const intervalMinutes = 1;
        let intervalStartTime = Date.now();
        const iconChanger = document.getElementById('colorbuzzer');
        const iconChanger1 = document.getElementById('colorbuzzer1');
        const iconChanger2 = document.getElementById('colorbuzzer2');

        const temperatureUnitButton = document.getElementById('toggleUnitButton');
        temperatureUnitButton.addEventListener('click', function() {
            temperatureUnit = (temperatureUnit === 'C') ? 'F' : 'C';
            temperatureUnitButton.innerText = (temperatureUnit === 'C') ? 'Switch to Fahrenheit' : 'Switch to Celsius';
            updateCharts();
        });

        function updateCharts() {
            // Update temperature and humidity chart
            fetch('/temperature_humidity_data')
                .then(response => response.json())
                .then(data => {
                    const ctxTempHumidity = document.getElementById('tempHumidityChart').getContext('2d');
                    if (tempHumidityChart) {
                        tempHumidityChart.destroy();
                    }
                    tempHumidityChart = new Chart(ctxTempHumidity, {
                        type: 'line',
                        data: {
                            labels: data.timestamps,
                            datasets: [
                                {
                                    label: 'Temperature (' + temperatureUnit + ')',
                                    data: data.temperature.map(temp => temperatureUnit === 'C' ? temp : temp * 9/5 + 32),
                                    borderColor: 'red',
                                    borderWidth: 1,
                                    fill: false
                                },
                                {
                                    label: 'Humidity (%)',
                                    data: data.humidity,
                                    borderColor: 'blue',
                                    borderWidth: 1,
                                    fill: false
                                }
                            ]
                        },
                        options: {
                            scales: {
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Time'
                                    }
                                },
                                y: {
                                    title: {
                                        display: true,
                                        text: 'Values'
                                    }
                                }
                            }
                        }
                    });
                    // Update highest temperature
                    highestTemperature = Math.max(...data.temperature.map(temp => temperatureUnit === 'C' ? temp : temp * 9/5 + 32));
                    highestTempDisplay.textContent = highestTemperature.toFixed(2);
                });

            // Update distance chart
            fetch('/distance_data')
                .then(response => response.json())
                .then(data => {
                    const ctxDistance = document.getElementById('distanceChart').getContext('2d');
                    if (distanceChart) {
                        distanceChart.destroy();
                    }
                    distanceChart = new Chart(ctxDistance, {
                        type: 'line',
                        data: {
                            labels: data.timestamps,
                            datasets: [
                                {
                                    label: 'Distance Sensor 1 (cm)',
                                    data: data.distance1,
                                    borderColor: 'green',
                                    borderWidth: 1,
                                    fill: false
                                },
                                {
                                    label: 'Distance Sensor 2 (cm)',
                                    data: data.distance2,
                                    borderColor: 'purple',
                                    borderWidth: 1,
                                    fill: false
                                }
                            ]
                        },
                        options: {
                            scales: {
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Time'
                                    }
                                },
                                y: {
                                    title: {
                                        display: true,
                                        text: 'Distance (cm)'
                                    }
                                }
                            }
                        }
                    });
                });

            // Update motion chart
            fetch('/motion_data')
                .then(response => response.json())
                .then(data => {
                    const ctxMotion = document.getElementById('MotionChart').getContext('2d');
                    if (MotionChart) {
                        MotionChart.destroy();
                    }
                    MotionChart = new Chart(ctxMotion, {
                        type: 'line',
                        data: {
                            labels: data.timestamps,
                            datasets: [
                                {
                                    label: 'Motion Detection',
                                    data: data.motion,
                                    borderColor: 'orange',
                                    borderWidth: 1,
                                    fill: false
                                }
                            ]
                        },
                        options: {
                            scales: {
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Time'
                                    }
                                },
                                y: {
                                    title: {
                                        display: true,
                                        text: 'Detection'
                                    }
                                }
                            }
                        }
                    });
                });
        }

        function updateBuzzerStatus(buzzerId, status) {
            const icon = document.querySelector(`#${buzzerId} img`);
            if (icon) {
                icon.src = status ? 'https://i.imghippo.com/files/6fNBA1725347941.png' : 'https://i.imghippo.com/files/bmspu1725442654.png';
            }
        }

        setInterval(function() {
            fetch('/motion_status')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('PirText').textContent = data.motionDetected ? 'Detected' : 'Not Detected';
                    updateBuzzerStatus('colorbuzzer2', data.motionDetected);
                });

            fetch('/buzzer_status')
                .then(response => response.json())
                .then(data => {
                    updateBuzzerStatus('colorbuzzer', data.temperatureHumidityBuzzer);
                    updateBuzzerStatus('colorbuzzer1', data.distanceBuzzer);
                });

            updateCharts();
        }, intervalMinutes * 60 * 1000);
    </script>
</body>
</html>
