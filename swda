import RPi.GPIO as GPIO
import time
import serial

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

Vibration_pin = 16
buzzer_pin = 15
status_button = 23
sensorstatus = 0
smokestatus = 0
Vibrationstatus = 0

GPIO.setup(Vibration_pin, GPIO.IN)
GPIO.setup(buzzer_pin, GPIO.OUT)
GPIO.setup(status_button, GPIO.IN, pull_up_down=GPIO.PUD_UP) 

last_button_state = GPIO.input(status_button)

def buzzer_on():
    GPIO.output(buzzer_pin, GPIO.HIGH)

def buzzer_off():
    GPIO.output(buzzer_pin, GPIO.LOW)
    
def buzzer_time(duration):
    GPIO.output(buzzer_pin, GPIO.HIGH)
    time.sleep(duration)
    GPIO.output(buzzer_pin, GPIO.LOW)

try:
    arduino = serial.Serial('/dev/ttyACM0', 9600, timeout=1)
    arduino.flush()
except serial.SerialException as e:
    print(f"Error Opening of port: {e}")
    exit()

try:
    while True:
        current_button_state = GPIO.input(status_button)

        if last_button_state == GPIO.HIGH and current_button_state == GPIO.LOW:
           
            sensorstatus = 1 if sensorstatus == 0 else 0
            print(f"Count is now: {sensorstatus}")
            time.sleep(0.2)  

        last_button_state = current_button_state
        
        time.sleep(0.01)

except KeyboardInterrupt:
    print("Program stopped by User")

except KeyboardInterrupt:
    print("Sensor stopped")

def SmokeSensor():
    global smokestatus
    if smokestatus == 1:
        if arduino.in_waiting > 0:
            line = arduino.readline().decode('utf-8').rstrip()
            return line 
        else:
            return "No data from Arduino" 
    else:
        return "smoke is off"

def VibrationSensor():
    global Vibrationstatus
    if Vibrationstatus == 1:
        if GPIO.input(Vibration_pin):
            buzzer_time(2)  
            return "1" 
        else:
            buzzer_off()
            return "0" 
    else:
        return "vibration is off"


try:
    while True:
        smoke_value = SmokeSensor()  
        vibration_status = VibrationSensor() 
        
        print(f"{smoke_value}") 
        print(f"{vibration_status}") 
        
        time.sleep(1) 

except KeyboardInterrupt:
    print("Sensor stopped")
    
finally:
    GPIO.cleanup() 
